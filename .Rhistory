x <- 1:10
if(x>5){ x<-0}
x
x <- 5:14
if(x>5){x<-0}
x
if(x>4){x<-0}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
libaray(datasets)
library(datasets)
x <- split(airquality,airquality$Month)
head(x)
head(airquality)
library(datasets)
data("iris")
data(iris)
?iris
mean(iris[sepal.length])
mean(irs[Sepal.Length])
mean(iris[Sepal.Length])
str(iris)
mean(iris$Sepal.Length)
data("mtcars")
str(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)[1] - sapply(split(mtcars$mpg, mtcars$cyl), mean)[3]
debug(ls)
ls
q
ls
ls(mtcars)
debuggingstate(on = FALSE)
library(datasets)
data("iris")
mean(iris[Sepal.Length, Species == "virginica"])
mean(iris$Sepal.Length)
selectedDAta <- iris$Sepal.Length[{if(Species == "virginica")}]
selectedDAta <- iris[which(Species == "virginica")]
selectedDAta <- iris[which(irisSpecies == "virginica")]
selectedDAta <- iris[which(iris$Species == "virginica")]
selectedDAta <- iris[which(iris$Species == "virginica"), ]
head(selectedDAta)
mean(iris[, Sepal.Length])
mean(selectedData$Sepal.Length)
head(selectedDAta)
mean(selectedDAta$Sepal.Length)
apply(selectedDAta[, 1:4], 2, mean)
data("mtcars")
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
str(mtcars)
with(mtcars, tapply(hp, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))[3]-with(mtcars, tapply(hp, cyl, mean))[1]
install.packages("install.load")
install.packages("install.load")
library(install.load)
installed.packages()
pkgs <- installed.packages()
View(pkgs)
("dplyr" %in% pkgs$package)
View(pkgs)
("dplyr" %in% pkgs[Package])
("dplyr" %in% pkgs$Package)
("dplyr" %in% pkgs[1:66, 1])
#
# Install the required libraries if necessary
#
pkgs <- installed.packages()
if (!("dplyr" %in% pkgs[, 1])) install.packages("dplyr")
library(dplyr)
if (!("ggplot2" %in% pkgs[, 1])) install.packages("ggplot2")
library(ggplot2)
if (!("grid" %in% pkgs[, 1])) install.packages("grid")
library(grid)
# use dplyr functions group_by and summarise to generate a dataset of the mean steps
# by weekday-weekend and time
newData <- activityDataCleaned %>%
group_by(activityWDWE, activityTime) %>%
summarise(stepsMean = mean(activitySteps))
#
#  Build the plot
#
require(grid)
g <- qplot(activityTime, stepsMean, data = newData, facets = . ~ activityWDWE, geom = "line")
g <- g + labs(title = "Figure 4 \nMean Steps Per Time Interval, Weekdays vs Weekends")
g <- g + labs(x = "Time Interval", y = "Mean Steps")
g <- g + facet_wrap(~activityWDWE, nrow = 2)
g <- g + theme(panel.margin = unit(1, "lines"))
#
#  Print the plot
#
g
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Dropbox/_Coursera/Data Science Specialization/05_Reproducible Research/Week02/RepData_PeerAssessment1")
source('~/.active-rstudio-document', echo=TRUE)
